import 'dart:async';

import 'package:diamnow/app/app.export.dart';
import 'package:flutter/material.dart';

class ThemeHelper {
  static StreamController<String> controller = StreamController<String>();

  static BaseTheme theme() => _getDefaultTheme();

  static String _appTheme;

  static Stream<String> appthemeString = controller.stream;

  static Map<String, BaseTheme> _supportedThemes = {
    "white": BaseTheme(),
    "dark": DarkTheme(),
    "pnShah": PnShahTheme(),
  };

  static BaseTheme _getDefaultTheme() {
    //return default strings if locale is not set

    if (_appTheme == null) return BaseTheme();

    //throw exception to notify given local is not found or not generated by the generator

    if (!_supportedThemes.containsKey(_appTheme))
      throw Exception(
          "$_appTheme is not found.\n Make sure you have added this locale in JSON file\n Try running flutter pub run build_runner");

    //return locale from map

    return _supportedThemes[_appTheme];
  }

  static void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
    controller.add(_newTheme);
  }
}

class DarkTheme extends BaseTheme {
  @override
  Color get colorPrimary => Colors.pink;
}

class PnShahTheme extends BaseTheme {
  @override
  Color get colorPrimary => fromHex("#4EB45E");
  @override
  Color get selectedFilterColor => fromHex("#F2FCF4");

  @override
  Color get unSelectedBgColor => fromHex("#f7f7f7");
}

class BaseTheme {
  Color get chipRange => fromHex("#E0E0E1");
  Color get bodercolour => fromHex("#DDDDDD");
  Color get colorPrimary => fromHex("#414143");
  Color get colorPrimaryShadow => fromHex("#4141434D");
  Color get headerBgColor => fromHex("#4EB45E");
  Color get textColor => fromHex("#232323");
  Color get bgColor => fromHex("#E3E3E3");
  Color get dividerColor => fromHex("#DDDDDD");
  Color get placeholderColor => fromHex("#999999");
  Color get textBlackColor => Colors.black;
  Color get blackColor => Colors.black;
  Color get whiteColor => Colors.white;
  Color get textGreyColor => fromHex("#454545");
  Color get buttonColor => fromHex("#4EB45E");
  Color get darkBlue => fromHex("#4EB45E");
  Color get errorColor => fromHex("#FF4D4D");
  Color get segmentSelectedColor => Colors.white;
  Color get borderColor => fromHex("#DDDDDD");
  Color get borderColorr => fromHex("#4545456E");
  Color get selectedFilterColor => fromHex("#414143");
  Color get unSelectedBgColor => fromHex("#FAFAFA");
  Color get seemoreBgColor => fromHex("#E6E6E6");
  Color get greenColor => fromHex("#0EAC33");
  Color get lightBGColor => fromHex("#F8F8F8");
  Color get textFieldBorderColor => fromHex("#DDDDDD");
  Color get statusHold => fromHex("#DB1C1C");
  Color get statusOnMemo => fromHex("#307BEA");
  Color get statusAvailable => fromHex("#6BC950");
  Color get statusNew => fromHex("#D2B48C");
  Color get statusOffer => fromHex("#FFC0CB");
  Color get statusMyHold => fromHex("#F1951E");
  Color get textGray => fromHex("#7B7E84");
  Color get drawerTitleColor => fromHex("#EEF1FC");
  Color get lightColorPrimary => fromHex("#F2FCF4");
  Color get redColor => fromHex("#FF4D4D");
  Color get whatsAppColor => fromHex("#55CD6C");
  Color get gmailColor => fromHex("#DB4436");
  Color get skypeColor => fromHex("#03A9F4");
  Color get bodyTextColor => fromHex("#999999");

  Color get shadowColorWithoutOpacity => fromHex("#4EB45E").withOpacity(0.1);
  Color get shadowColor => shadowColorWithoutOpacity.withOpacity(0.1);
  // Color get shadowColor => fromHex("#7D9EF61A");

  TextStyle get black24TitleColor {
    return TextStyle(
        fontSize: getFontSize(24),
        fontWeight: FontWeight.bold,
        color: textColor);
  }

  TextStyle get black24TitleColorWhite {
    return TextStyle(
        fontSize: getFontSize(24),
        fontWeight: FontWeight.bold,
        color: whiteColor);
  }

  TextStyle get blackNormal14TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.normal,
        color: textColor);
  }

  TextStyle get blackNormal14TitleColorPrimary {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.normal,
        color: colorPrimary);
  }

  TextStyle get blackNormal12TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.normal,
        color: textColor);
  }

  TextStyle get dividerColorNormal12Title {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.normal,
        color: dividerColor);
  }

  TextStyle get primaryNormal12TitleColor {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.normal,
        color: colorPrimary);
  }

  TextStyle get whiteNormal12TitleColor {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.normal,
        color: whiteColor);
  }

  TextStyle get greenPrimaryNormal12TitleColor {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.normal,
        color: greenColor);
  }

  TextStyle get redPrimaryNormal12TitleColor {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.normal,
        color: redColor);
  }

  TextStyle get blackPrimaryNormal14TitleColor {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.normal,
        color: blackColor);
  }

  TextStyle get redPrimaryNormal14TitleColor {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.normal,
        color: redColor);
  }

  TextStyle get blackNormal16TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.normal,
        color: textColor);
  }

  TextStyle get blackBold16TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w500,
        color: textColor);
  }

  TextStyle get blackNormal18TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(18),
        fontWeight: FontWeight.normal,
        color: textColor);
  }

  TextStyle get blackMedium16TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(16),
        fontWeight: FontWeight.w500,
        color: textColor);
  }

  TextStyle get blackMedium14TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.w500,
        color: textColor);
  }

  TextStyle get blackMedium12TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(12),
        fontWeight: FontWeight.w500,
        color: textColor);
  }

  TextStyle get blackNormal18TitleColorPrimary {
    return TextStyle(
        fontSize: getFontSize(18),
        fontWeight: FontWeight.normal,
        color: colorPrimary);
  }

  TextStyle get blackSemiBold18TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(18),
        fontWeight: FontWeight.w600,
        color: textColor);
  }

  TextStyle get blackMedium20TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(20),
        fontWeight: FontWeight.w600,
        color: textColor);
  }

  TextStyle get whiteMedium20TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(20),
        fontWeight: FontWeight.w600,
        color: whiteColor);
  }

  TextStyle get grey14HintTextStyle {
    return TextStyle(
      fontSize: getFontSize(14),
      color: textGreyColor,
      fontWeight: FontWeight.w500,
    );
  }

  TextStyle get grey12HintTextStyle {
    return TextStyle(
      fontSize: getFontSize(12),
      color: textGreyColor,
      fontWeight: FontWeight.normal,
    );
  }

  TextStyle get black16TextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: textColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get blue16TextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: colorPrimary,
        fontWeight: FontWeight.w500);
  }

  TextStyle get black18TextStyle {
    return TextStyle(
        fontSize: getFontSize(18),
        color: textColor,
        fontWeight: FontWeight.w500);
  }

  TextStyle get primary16TextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: colorPrimary,
        fontWeight: FontWeight.normal);
  }

  TextStyle get black12TextStyle {
    return TextStyle(
        fontSize: getFontSize(12),
        color: textColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get blackBold12TextStyle {
    return TextStyle(
        fontSize: getFontSize(12),
        color: textColor,
        fontWeight: FontWeight.w800);
  }

  TextStyle get grey12TextStyle {
    return TextStyle(
        fontSize: getFontSize(12),
        color: textGreyColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get grey14TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: textGreyColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get black12TextStyleMedium {
    return TextStyle(
        fontSize: getFontSize(12),
        color: textColor,
        fontWeight: FontWeight.w500);
  }

  TextStyle get error12TextStyle {
    return TextStyle(
        fontSize: getFontSize(12),
        color: errorColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get error12MediumTextStyle {
    return TextStyle(
        fontSize: getFontSize(12),
        color: errorColor,
        fontWeight: FontWeight.w500);
  }

  TextStyle get error14TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: errorColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get black12TextStyleBold {
    return TextStyle(
        fontSize: getFontSize(12),
        color: textColor,
        fontWeight: FontWeight.w800);
  }

  TextStyle get white16TextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: whiteColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get white18TextStyle {
    return TextStyle(
        fontSize: getFontSize(18),
        color: whiteColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get black14TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: textColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get black16MediumTextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: textColor,
        fontWeight: FontWeight.w500);
  }

  TextStyle get black18MediumTextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: textColor,
        fontWeight: FontWeight.w500);
  }

  TextStyle get black14W300TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: textColor,
        fontWeight: FontWeight.w300);
  }

  TextStyle get black14W400TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: textColor,
        fontWeight: FontWeight.w400);
  }

  TextStyle get grey16HintTextStyle {
    return TextStyle(
      fontSize: getFontSize(16),
      color: textGreyColor,
      fontWeight: FontWeight.w500,
    );
  }

  TextStyle get darkgray16TextStyle {
    return TextStyle(
      fontSize: getFontSize(16),
      color: colorPrimary,
      fontWeight: FontWeight.w500,
    );
  }

  TextStyle get greySemibold18TitleColor {
    return TextStyle(
      fontSize: getFontSize(18),
      color: textGreyColor,
      fontWeight: FontWeight.w600,
    );
  }

  TextStyle get darkBlue16TextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: darkBlue,
        fontWeight: FontWeight.w500);
  }

  TextStyle get primaryColor14TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: colorPrimary,
        fontWeight: FontWeight.w500);
  }

  TextStyle get whiteColor14TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: whiteColor,
        fontWeight: FontWeight.w500);
  }

  TextStyle get commonAlertDialogueTitleStyle {
    return TextStyle(
        fontSize: getFontSize(18),
        color: textColor,
        fontWeight: FontWeight.w500);
  }

  TextStyle get commonAlertDialogueDescStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: textColor,
        fontWeight: FontWeight.w400);
  }

  TextStyle get error16TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: errorColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get blue14TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: colorPrimary,
        fontWeight: FontWeight.normal);
  }

  TextStyle get blue12TextStyle {
    return TextStyle(
        fontSize: getFontSize(12),
        color: colorPrimary,
        fontWeight: FontWeight.normal);
  }

  TextStyle get blue10TextStyle {
    return TextStyle(
        fontSize: getFontSize(10),
        color: colorPrimary,
        fontWeight: FontWeight.normal);
  }

  TextStyle get blue20TextStyle {
    return TextStyle(
        fontSize: getFontSize(20),
        color: colorPrimary,
        fontWeight: FontWeight.w600);
  }

  TextStyle get green10TextStyle {
    return TextStyle(
        fontSize: getFontSize(12),
        color: greenColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle getTabbarTextStyle({Color textColor}) {
    return TextStyle(
        fontSize: getFontSize(12),
        color: textColor ?? whiteColor,
        fontWeight: FontWeight.normal);
  }
}

BaseTheme get appTheme => ThemeHelper.theme();
