import 'dart:async';

import 'package:diamnow/app/app.export.dart';
import 'package:flutter/material.dart';

class ThemeHelper {
  static StreamController<String> controller = StreamController<String>();

  static BaseTheme theme() => _getDefaultTheme();

  static String _appTheme;

  static Stream<String> appthemeString = controller.stream;

  static Map<String, BaseTheme> _supportedThemes = {};

  static BaseTheme _getDefaultTheme() {
    //return default strings if locale is not set

    if (_appTheme == null) return BaseTheme();

    //throw exception to notify given local is not found or not generated by the generator

    if (!_supportedThemes.containsKey(_appTheme))
      throw Exception(
          "$_appTheme is not found.\n Make sure you have added this locale in JSON file\n Try running flutter pub run build_runner");

    //return locale from map

    return _supportedThemes[_appTheme];
  }

  static void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
    controller.add(_newTheme);
  }
}

class BaseTheme {
  Color get colorPrimary => fromHex("#6E8FE7");
  Color get headerBgColor => fromHex("#6E8FE7");
  Color get textColor => Colors.black;
  Color get bgColor => fromHex("#6E8FE7");
  Color get dividerColor => fromHex("#E3E3E3");
  Color get textBlackColor => Colors.black;
  Color get whiteColor => Colors.white;
  Color get textGreyColor => fromHex("#C7C7C7");
  Color get buttonColor => fromHex("#6E8FE7");
  Color get darkBlue => fromHex("#003365");
  Color get errorColor => fromHex("#FF4D4D");
  Color get segmentSelectedColor => Colors.white;
  Color get borderColor => fromHex("#e3e3e3");
  Color get selectedFilterColor => fromHex("#eaeffb");
  Color get unSelectedBgColor => fromHex("#f7f7f7");

  TextStyle get black24TitleColor {
    return TextStyle(
        fontSize: getFontSize(24),
        fontWeight: FontWeight.bold,
        color: textColor);
  }

  TextStyle get black24TitleColorWhite {
    return TextStyle(
        fontSize: getFontSize(24),
        fontWeight: FontWeight.bold,
        color: whiteColor);
  }

  TextStyle get blackNormal14TitleColorblack {
    return TextStyle(
        fontSize: getFontSize(14),
        fontWeight: FontWeight.normal,
        color: textColor);
  }

  TextStyle get grey14HintTextStyle {
    return TextStyle(
      fontSize: getFontSize(14),
      color: textGreyColor,
      fontWeight: FontWeight.w500,
    );
  }

  TextStyle get black16TextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: textColor,
        fontWeight: FontWeight.normal);
  }

  TextStyle get black14TextStyle {
    return TextStyle(
        fontSize: getFontSize(14), color: textColor,fontWeight: FontWeight.normal);
  }

  TextStyle get grey16HintTextStyle {
    return TextStyle(
      fontSize: getFontSize(16),
      color: textGreyColor,
      fontWeight: FontWeight.w500,
    );
  }

  TextStyle get darkBlue16TextStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: darkBlue,
        fontWeight: FontWeight.w500);
  }

  TextStyle get primaryColor14TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: colorPrimary,
        fontWeight: FontWeight.w500);
  }

  TextStyle get commonAlertDialogueTitleStyle {
    return TextStyle(
        fontSize: getFontSize(18),
        color: textColor,
        fontWeight: FontWeight.w500);
  }

  TextStyle get commonAlertDialogueDescStyle {
    return TextStyle(
        fontSize: getFontSize(16),
        color: textColor,
        fontWeight: FontWeight.w400);
  }

  TextStyle get error16TextStyle {
    return TextStyle(
        fontSize: getFontSize(14),
        color: errorColor,
        fontWeight: FontWeight.normal);
  }
}

BaseTheme get appTheme => ThemeHelper.theme();
